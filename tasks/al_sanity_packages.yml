---
# All rights reserved (c) 2020-2021, Vladimir Botka <vbotka@gmail.com>
# Simplified BSD License, https://opensource.org/licenses/BSD-2-Clause

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ansible_lib: al_sanity_packages
#
# Description: Test required packages are installed.
#
#   Test whether the required packages are installed. Display error
#   message and fail if the required packages are not installed. See
#   the parameters below.
#
# Input:
#
#   al_sanity_role_name .................. Name of the role
#   al_sanity_packages_required .......... Required packages
#   al_sanity_packages_gather_subset ..... Collect minimal subset by setup
#
# Output: None
#
# Example:
#
#   Do not collect minimal subset by setup (variables
#   ansible_distribution_* have already been collected). If the item
#   is a list at least one of the packages from the list must be
#   installed.
#
#   vars:
#     al_debug: true
#     al_sanity_packages_gather_subset: false
#     al_sanity_packages_required:
#       Ubuntu:
#         default:
#           - ["python-openssl", "python-cryptography"]
#           - ["acme-tiny"]
#
#   tasks:
#     - set_fact:
#         al_sanity_role_name: "{{ role_name }}"
#     - include_role:
#         name: vbotka.ansible_lib
#         tasks_from: al_sanity_packages
#
# [TODO]
#
#   * test version of the platform (only default atm)
#   * optionally meta end_host instead of fail
#   * test versions of the packages (versions not tested atm)
#     vars:
#       - pkg_list:
#           - nginx-1.12.2
#           - zip-3.0
#     tasks:
#       - package_facts:
#       - debug:
#           msg: "Found {{ item.0 }}-{{ item.1 }}"
#         with_together:
#           - "{{ pkg_list|
#                 map('regex_replace','^(.*)-(.*)$', '\\1')|list }}"
#           - "{{ pkg_list|
#                 map('regex_replace','^(.*)-(.*)$', '\\2')|list }}"
#         when: pkgv|map('regex_search', '^' ~ item.1)|list|length > 0
#         vars:
#           pkgn: "{{ ansible_facts.packages[item.0]|default([]) }}"
#           pkgv: "{{ pkgn|map(attribute='version')|list }}"
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- name: "al_sanity_packages: Fail when al_sanity_role_name not defined."
  ansible.builtin.fail:
    msg: "[ERROR] Mandatory variable al_sanity_role_name not defined."
  when: al_sanity_role_name is undefined

- name: "al_sanity_packages: Fail when al_sanity_packages_required not defined."
  ansible.builtin.fail:
    msg: "[ERROR] Mandatory variable al_sanity_packages_required not defined."
  when: al_sanity_packages_required is undefined

- name: "al_sanity_packages: Setup. Collect minimal subset."
  ansible.builtin.setup:
    gather_subset:
      - '!all'
  when: al_sanity_packages_gather_subset|bool

# Debug - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- name: "al_sanity_packages: Debug. Print variables."
  vars:
    msg: |-
      ansible_distribution [{{ ansible_distribution }}]
      ansible_distribution_major_version [{{ ansible_distribution_major_version }}]
      ansible_distribution_version [{{ ansible_distribution_version }}]
      ansible_distribution_release [{{ ansible_distribution_release }}]
      ansible_python_version [{{ ansible_python_version }}]

      al_sanity_role_name [{{ al_sanity_role_name }}]
      al_sanity_packages_gather_subset [{{ al_sanity_packages_gather_subset }}]

      al_sanity_packages_required
      {{ al_sanity_packages_required|to_yaml }}

  ansible.builtin.debug:
    msg: "{{ msg.split('\n') }}"
  when: al_debug|bool

# Find not installed packages - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- name: "al_sanity_packages: Collect installed packages."
  ansible.builtin.package_facts:
- name: "al_sanity_packages: Set list of installed packages."
  ansible.builtin.set_fact:
    my_installed_packages: "{{ ansible_facts.packages.keys()|list }}"
- name: "al_sanity_packages: Set list of not installed packages."
  ansible.builtin.set_fact:
    my_not_installed_packages: "{{ my_not_installed_packages|default([]) + [item] }}"
  loop: "{{ al_sanity_packages_required[ansible_distribution]['default'] }}"
  when: item|intersect(my_installed_packages)|length == 0
- name: "al_sanity_packages: Debug. Display my_installed_packages."
  ansible.builtin.debug:
    msg: "Installed packages: {{ my_installed_packages }}"
  when: al_debug|bool
- name: "al_sanity_packages: Debug. Display my_not_installed_packages."
  ansible.builtin.debug:
    msg: "Not installed packages: {{ my_not_installed_packages|default([]) }}"
  when: al_debug|bool

# ERROR. Fail - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- name: "al_sanity_packages: Display ERROR required packages not installed. Fail."
  ansible.builtin.fail:
    msg: "[ERROR] Packages {{ my_not_installed_packages }}
          not installed in role {{ al_sanity_role_name }}"
  when: my_not_installed_packages|default([])|length > 0

# Debug. Passed - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- name: "al_sanity_packages: Debug. Test required packages passed."
  ansible.builtin.debug:
    msg: "Role {{ al_sanity_role_name }} test required packages passed."
  when: al_debug|bool

# EOF
...
