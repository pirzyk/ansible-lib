---
# All rights reserved (c) 2020, Vladimir Botka <vbotka@gmail.com>
# Simplified BSD License, https://opensource.org/licenses/BSD-2-Clause

# ------------------------------------------------------------------------------
# ansible_lib: al_sanity_ansible_version
#
# Description: Test whether Ansible version is supported by the role.
#
#   Test whether the Ansible version is supported or not. By default
#   print error message and fail if the version is not
#   supported. Optionally end the host or print warning only and
#   continue play. See the parameters below.
#
# Input:
#
#   galaxy_info ......................... Meta data
#   al_sanity_role_name ................. Name of the role
#   al_sanity_ansible_version_fail ...... Fail when version not supported
#   al_sanity_ansible_version_end_host .. End host when version not supported
#   al_sanity_ansible_version_warning ... Print warning when version not
#                                         supported. Continue play.
#
# Output: None
#
# Example:
#
#   End host when version is not supported. Print warning. Print debug
#   messages.
#
#   vars:
#     al_debug: True
#     al_sanity_ansible_version_fail: False
#     al_sanity_ansible_version_end_host: True
#   tasks:
#     - include_vars:
#         file: meta/main.yml
#       when: galaxy_info is undefined
#     - set_fact:
#         al_sanity_role_name: "{{ role_name }}"
#     - include_role:
#         name: vbotka.ansible_lib
#         tasks_from: al_sanity_ansible_version
# ------------------------------------------------------------------------------

- name: "al_sanity_ansible_version: Fail when galaxy_info not defined."
  fail:
    msg: "[ERROR] Mandatory variable galaxy_info not defined."
  when: galaxy_info is undefined

- name: "al_sanity_ansible_version: Fail when al_sanity_role_name not defined."
  fail:
    msg: "[ERROR] Mandatory variable al_sanity_role_name not defined."
  when: al_sanity_role_name is undefined

- name: "al_sanity_ansible_version: Get Ansible minimal version."
  set_fact:
    al_sanity_ansible_version_min: "{{ galaxy_info.min_ansible_version }}"

# Debug
- name: "al_sanity_ansible_version: Debug. Print variables."
  when: al_debug|bool
  vars:
    msg: |
      ansible_distribution [{{ ansible_distribution }}]
      ansible_distribution_major_version [{{ ansible_distribution_major_version }}]
      ansible_distribution_version [{{ ansible_distribution_version }}]
      ansible_distribution_release [{{ ansible_distribution_release }}]

      al_sanity_role_name [{{ al_sanity_role_name }}]
      al_sanity_ansible_version_min [{{ al_sanity_ansible_version_min }}]

      al_sanity_ansible_version_fail [{{ al_sanity_ansible_version_fail }}]
      al_sanity_ansible_version_end_host [{{ al_sanity_ansible_version_end_host }}]
      al_sanity_ansible_version_warning [{{ al_sanity_ansible_version_warning }}]

      galaxy_info.min_ansible_version [{{ galaxy_info.min_ansible_version }}]
  debug:
    msg: "{{ msg.split('\n') }}"

# ERROR. Fail.
- name: "al_sanity_ansible_version: Print ERROR version not supported. Fail."
  fail:
    msg: "[ERROR] {{ ansible_version.full }} not supported
          by role {{ al_sanity_role_name }}."
  when:
    - ansible_version.full is version(al_sanity_ansible_version_min, '<')
    - al_sanity_ansible_version_fail|bool
# ERROR. End host.
- name: "al_sanity_ansible_version: Test Ansible version is supported. End host if not."
  block:
    - name: "al_sanity_ansible_version: Print ERROR Ansible version not supported. End host."
      debug:
        msg: "[ERROR] {{ ansible_version.full }} not supported
              by role {{ al_sanity_role_name }}. End host."
    - name: "al_sanity_ansible_version: Meta end_host."
      meta: end_host
  when:
    - ansible_version.full is version(al_sanity_ansible_version_min, '<')
    - al_sanity_ansible_version_end_host|bool
# WARNING
- name: "al_sanity_ansible_version: Print WARNING Ansible version not supported."
  debug:
    msg: "[WARNING] {{ ansible_version.full }} not supported
          by role {{ al_sanity_role_name }}."
  when:
    - ansible_version.full is version(al_sanity_ansible_version_min, '<')
    - al_sanity_ansible_version_warning|bool

# Debug
- name: "al_sanity_ansible_version: Debug. Test supported Ansible version passed."
  when: al_debug|bool
  debug:
    msg: "Role {{ al_sanity_role_name }} test supported Ansible version
          {{ ansible_version.full }} passed."

# EOF
...
